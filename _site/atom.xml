<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Miguel Paz</title>
    <link type="application/atom+xml" rel="self" href="http://miguelpaz.github.io/atom.xml"/>
  
  <link href="http://miguelpaz.github.io/"/>
  <id>http://miguelpaz.github.io/</id>
  <updated>2017-02-11T02:28:33Z</updated>
  <author>
    <name>Miguel Paz</name>
    <email>miguel.paz@journalism.cuny.edu</email>
  </author>
  <rights type="text">Copyright ¬© 2017 Miguel Paz. All rights reserved.</rights>
  
  <entry>
  <title type="text">Basic guide to get a domain, set up web hosting and upload your first website via FTP</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/first-website-tutorial.html" />
  <id>http://miguelpaz.github.io/first-website-tutorial</id>
  <published>2016-10-18T00:00:00Z</published>
  <updated>2016-10-18T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p><img src="assets/images/firstwebpage-sky.jpeg" alt="It all starts with an idea" /></p>

<p>By Miguel Paz. Photo by <a href="https://unsplash.com/@grakozy">Greg Rakozy</a></p>

<p>üí° <strong>This is a simple tutorial I wrote for my students at CUNY Graduate School of Journalism. It is entry level and includes a couple class specific details.</strong></p>

<h2 id="choosing-a-domain">Choosing a domain</h2>

<p>A domain is the name of your website and it‚Äôs made of 2 things:</p>

<p>A name: <em>what-ever-you-want-to-name-your-website</em></p>

<p>A top level domain: .com, .org, .net, etc.</p>

<p>For example a domain that I own is miguelpaz.info. The New York Times is nytimes.com. CUNY‚Äôs is cuny.edu. There are also subdomains. CUNY‚Äôs Journalism School website is one: journalism.cuny.edu.</p>

<p>There are many types of domains, starting with the <a href="https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Original_top-level_domains">original top level domains</a> (including .com, .org, .net, .edu), <a href="http://country_code_top">country top level domains</a> (like .us, .fr, .ca, .cl, .ar, .co, .tv, .io, .in, etc.), second level domains (.co.uk, .com.ar, etc.) and other types of domains. There is a <a href="https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#ICANN-era_generic_top-level_domains">new list of domain names</a> you can also check (examples: .nyc, .miami, .bike). In most cases, this ones are sold by <a href="https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#ICANN-era_generic_top-level_domains">specific domain name registrars</a>. A <a href="https://www.iana.org/domains/root/db">full list of domains</a> is maintained by the Internet Assigned Numbers Authority.</p>

<p><a href="https://en.wikipedia.org/wiki/Domain_name">Domain names</a> can be bought (we talk about buying domains but you actually rent them) for one year and renewed annually from <a href="https://en.wikipedia.org/wiki/Domain_name_registrar">Domain Name Registrars</a>. You can also choose to buy your domain for more years. You can buy a domain and pay for web hosting from a single provider or get the web hosting elsewhere. Due to the specificity of each service, it‚Äôs more usual to get the domain and hosting separately.</p>

<p>Once you register a domain name, you will get one or more Domain Name Servers (DNS). DNS ‚Äú<a href="http://www.networksolutions.com/support/what-is-a-domain-name-server-dns-and-how-does-it-work/">are the Internet‚Äôs equivalent of a phone book</a>. They maintain a directory of domain names and translate them to Internet Protocol (IP) addresses‚Äù. This may look like host1.domainnameregistrar.com which is the text on top of the underlying <a href="https://en.wikipedia.org/wiki/IP_address">IP address</a>.</p>

<p>Depending on popularity and availability, prices of domains vary. A .com domain can cost $10 dollars per year, while a .io (very popular in <em>startupland</em> lately) will cost $50. Prices may vary also between domain name registrars, if they are on sale, etc.</p>

<p>Things to look for when you buy a domain name from a domain registrar:</p>

<p>-FTP access<br />
-Includes cPanel (a dashboard to manage your domain and DNS)<br />
-Full control of your DNS<br />
-Includes a <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">SSL</a> certificate free for one or more years (so your website uses <a href="https://en.wikipedia.org/wiki/HTTPS">HTTPS</a> protocol by default). If it doesn‚Äôt and the price of the domain is very cheap, you can get it and then go get a free certificate with <a href="https://letsencrypt.org/getting-started/">Lets Encrypt</a>.<br />
-Does not charge you extra if you want to transfer your domain name to another registrar.<br />
-Provides Domain forwarding</p>

<h2 id="buy-a-domain-and-web-hosting">Buy a domain and web hosting</h2>

<p>You can purchase domains on many sites,  including <a href="https://www.midphase.com/website-hosting/">Midphase</a>, where we are buying domains and hosting for our class (please see disclosure below).</p>

<p>Midphase right now has a <a href="https://www.midphase.com/website-hosting/#">‚ÄúPersonal web hosting‚Äù</a> offer that includes: A free domain and web hosting for 1 website and 1 subdomain. The 1 year web hosting plan costs $ 42.84. A 3 month plan is $ 10.71.</p>

<p>There are many other sites to buy domains like <a href="https://www.gandi.net">Gandi</a>, <a href="https://www.namecheap.com">Namecheap</a>, <a href="https://iwantmyname.com">I want my name</a>, etc.  I specially recommend <a href="https://www.gandi.net/">Gandi.net</a> because of its proven track record of taking special care of security, and it‚Äôs supports of a variety of open source projects.</p>

<p>Most will offer discounts and cheap prices when you buy a domain for the first time but when you renew it, the price will be higher. If you can afford it buy it for more than one year right away.</p>

<p>Since you want to build your portfolio and online presence, first try to get your own name as a domain but if you can‚Äôt, be creative and come up with something you know you will use for quite some time and it is memorable. First site has <a href="http://firstsiteguide.com/choose-domain/">11 great tips for choosing a domain name.</a></p>

<h2 id="step-by-step-to-getting-a-domain-and-hosting-with-midphase">Step by step to getting a domain and hosting with Midphase*</h2>

<p>1.- Go to <a href="https://www.midphase.com/website-hosting/">Midphase</a> and <a href="https://www.midphase.com/knowledgebase/display/MID/How+To+Register+A+Domain">purchase domain</a> and hosting (I recommend the cheapest plan). Do this as soon as you can. Domain names and hosting can take up to 48 hours to start working properly.</p>

<p><img src="assets/images/image_0.png" alt="Choose Plan" /></p>

<p>2.- If you don‚Äôt have a domain yet, use this search box to add the name you want and look for options and prices. For example I searched for possible domains for my name.</p>

<p><img src="assets/images/image_1.png" alt="Choose Domain" /></p>

<p>3.- I got this options.</p>

<p><img src="assets/images/image_2.png" alt="Options to choose a domain name from" /></p>

<p>4.- I bought the cheapest one for this tutorial: miguelpaz.site</p>

<p><img src="assets/images/image_3.png" alt="I am cheap" /></p>

<p>5.- Then add your information and pay for it.</p>

<p><img src="assets/images/image_4.png" alt="Paid six dollars for domain and 1 month of hosting" /></p>

<p>6.- Confirm the order and set your password.</p>

<p><img src="assets/images/image_5.png" alt="Almost there" /></p>

<p><img src="assets/images/image_6.png" alt="Set your password" /></p>

<p>7.- You will see a <a href="https://www.midphase.com/knowledgebase/display/MID/How+To+Access+cPanel+Through+The+Shared+Hosting+Tab">Dashboard and a Icon Drive for Share Hosting</a>. Click on that to see the basic information of whatever domain you bought.</p>

<p><img src="assets/images/image_7.png" alt="Set up how to renew your plan" /></p>

<p>8.- Only if you want to or feel the need to read again about FTP, go to the left icon for Shared Hosting and follow the tutorial that explains very well how to connect via FTP. This is your cPanel (dashboard to manage your website). You will also get an email from Midphase with information for you to remember. Save it.</p>

<p><img src="assets/images/image_8.png" alt="FTP tutorial" /></p>

<p>9.- Now, <strong>important</strong>, to access your domain and hosting and get your FTP credentials <strong>you must</strong> log into your Control Panel or CPanel at <a href="https://chi.midphase.com/home">https://chi.midphase.com/home</a> with your username and password. Once you are in, click on the left drive icon of Shared Hosting, look for your domain name and click on it. You will see your credentials to use in your FTP:</p>

<p>Host: miguelpaz.site
Username: miguelpa
Password: the one you created when you created your account in MidPhase. In here you can create a new specific password for your FTP (recommended).</p>

<p><img src="assets/images/image_9.png" alt="Your shared hosting" /></p>

<p>You are done with that üëçüèºüçæ.</p>

<p>10.- Now you will download an FTP client to use it to upload your website to your hosting server.</p>

<p>FTP stands for <a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">‚ÄúFile Transfer Protocol‚Äù</a> and it is used to connect between your computer üíª (client) and the server üñ• of your web hosting.</p>

<p>In order to do that you need to install in your computer an FTP client. This is basically a software that allows you to upload your webpage folder and it‚Äôs contents from your computer to your web hosting so it can be displayed in your web page under your domain name. It can also be used to download stuff from your web hosting.</p>

<p>Think of FTP clients as the grandparents of Dropbox or Google Drive, and of FTP as the protocol that helps your machine talk to another machine (since 1971 by the way) to get your stuff into the web.</p>

<p>11.- We‚Äôre going to use FileZilla FTP client, since it‚Äôs free, open source and offers a straight forward (ugly) but useful interface.</p>

<p>12.- Download <a href="https://filezilla-project.org/">FileZilla</a>. If you have issues, try <a href="https://sourceforge.net/projects/filezilla/?source=typ_redirect">downloading it here</a>. FYI: if you don‚Äôt like it there are other programs that will work just as well such as Cyberduck.</p>

<p>13.- Open FileZilla. On the top side you will see 4 boxes: Host, Username, Password, Port where you must write your web hosting credentials and the click on the Quickconnect button, to connect to your web hosting and upload files.</p>

<p><img src="assets/images/image_11.png" alt="add your credentials" /></p>

<p>-In the ‚ÄúHost‚Äù field, add your domain name. <br />
Ex. Host: miguelpaz.site</p>

<p>-In the ‚ÄúUsername‚Äù field, enter your cPanel or FTP username.<br />
Ex. Username: miguelpa</p>

<p>-In the ‚ÄúPassword‚Äù field, enter your MidPhase cPanel password.</p>

<p>-Leave port set blank or at ‚Äú21‚Äù.</p>

<p>-Click ‚ÄúQuick Connect‚Äù.</p>

<blockquote>
  <p>Tip: If your hosting says login failed due to password issues, you should create a new password that is stronger.</p>
</blockquote>

<p>Not sure about how FileZilla looks and organizes stuff?</p>

<p>The <strong>left</strong> side of FileZilla shows the files stored on your Computer. The <strong>right</strong> side shows the file on your server, where you will see a set of folders and files.</p>

<p>The <strong>only important folder</strong> for you in the server side now is the one called <strong>‚Äúpublic_html‚Äù</strong>. This folder is where you will upload your files from the <strong>left</strong> side (stored in your computer) to the <strong>right</strong>side (your web hosting server).</p>

<p>All you need to do is find the files you want to upload on the left side of the screen, click once on them and then drag them to the right side of the screen. This will upload the files to your website.</p>

<p>14.- <strong>Never</strong> erase your ‚Äúpublic_html‚Äù folder. If you don‚Äôt know what other folders or files are for at your server, <strong>DO NOT</strong> delete, rename or move them.</p>

<p>Still confused? Here is a <a href="https://www.youtube.com/watch?v=O3DudpEMPiY">video tutorial</a>, a list of <a href="http://www.boredpanda.com/worst-domain-names/">crazy awkward domain names</a> and some of the <a href="http://archive.oreilly.com/pub/post/the_worlds_longest_domain_name.html">longest domains ever</a></p>

<p>That‚Äôs it! Now go celebrate you have your first website online.üéâ</p>

<p><strong><em>Disclaimer:</em></strong> None of the professors or coaches are connected in any way with any of the companies mentioned. We have chosen Midphase as a web hosting provider due to it‚Äôs low price, ok service, and because it is easier to pick one provider to explain the entire class how to setup your website. We‚Äôll all have a common dashboard which makes it easier for everyone. You can choose other providers. Feel free to ask me about other options.*</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Using formulas for strings in Google Sheets</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/googlesheets-basics.html" />
  <id>http://miguelpaz.github.io/googlesheets-basics</id>
  <published>2016-06-06T00:00:00Z</published>
  <updated>2016-06-06T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>Google Sheets is a great tool to work with your data. You can store it, clean it, organize it, manipulate it, analyze it, scrape webpages with it and download it in several formats.</p>

<p>This tutorial will give you a basic overview of the text formulas Google Sheets offers you, also with some basic, most used functions for strings.</p>

<p>It will assume that you already knows how to do the most basic things, like removing or adding columns and rows (just right click them) and sheet tabs, for instance. We won‚Äôt talk about formatting the data here, with colors and fonts.</p>

<p>For this, you will need:</p>

<ol>
  <li><a href="https://docs.google.com/a/voltdata.info/spreadsheets/d/1rQCG0ggtKzrfTxY2yQ4sDTo6SOz5QQONIz9vt6GhrQA/edit?usp=sharing">Access the exemple data</a></li>
  <li>A Google account</li>
  <li><a href="https://docs.google.com/spreadsheets">Going to Google Spreadsheets page</a></li>
</ol>

<hr />

<h2 id="getting-started">Getting started</h2>

<p>Access the example data in the link above about newsrooms based in New York city - with addresses, social media following numbers, description and even latitude and longitude.</p>

<p>Make a copy of this file by doing <code class="highlighter-rouge">File -&gt; Make a Copy</code>.</p>

<p>After that, you will see we created a new sheet tab on the bottom, called ‚ÄúTest here‚Äù. This was made so you have a secure environment to work with your data without erasing the original dataset and having the trouble to look for the original file to copy again.</p>

<blockquote>
  <p>Always make a copy of the original dataset</p>
</blockquote>

<p>You can either copy and paste the data in the second sheet or <strong>duplicate</strong> the original file as another sheet.</p>

<h2 id="putting-values-together">Putting values together</h2>

<p>Sometimes, you might need to put together values within certain cells, for whatever reason you deem necessary. For, there are two basic formulas - <code class="highlighter-rouge">CONCAT</code> for two values, and <code class="highlighter-rouge">CONCATENATE</code> for more than two values. The application is the same.</p>

<p>In our example dataset, take a look at the LAT and LONG columns. Some people like to have that info in the same column. Lets do it then.</p>

<p>Create a new column on the side of the LONG column and apply the formula:</p>

<p><code class="highlighter-rouge">=CONCATENATE(D1, ", ",E1 )</code></p>

<p>We are using <code class="highlighter-rouge">CONCATENATE</code> because we will want to separate the values with a comma - making it three strings to put together. If you for some reason don‚Äôt want the comma, you may use <code class="highlighter-rouge">CONCAT</code>.</p>

<p>After that, just apply the same formula to the other cells, by dragging the blue square in the corner of the cell.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/google_sheets_concat.png?raw=true" alt="Google Sheets - Concat" /></p>

<p>You can also use the <code class="highlighter-rouge">JOIN</code> formula, which is very similar, but allows you to use a specified delimiter.</p>

<h2 id="splitting-values">Splitting values</h2>

<p>As with merging cells, is also very common that you will need to split values within a cell. There is a basic command for that, the <code class="highlighter-rouge">SPLIT</code> function.</p>

<p>You have to determine with character will be used to tell your cell to split into. Lets say you now want to undo the CONCAT operation you did, and now need to separate LAT and LONG.</p>

<p>First, you are splitting two values, so you will need two more columns. Create them and apply the formula:</p>

<p><code class="highlighter-rouge">=SPLIT(F1, ", ")</code></p>

<p>This way, your telling the formula to split that values on that cell based on the comma your have there. The split value will disappear.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/google_sheets_split.png?raw=true" alt="Google Sheets - Split" /></p>

<h2 id="find-and-replace">Find and replace</h2>

<p>Finding and replacing values may be one of the most useful tools to clear and manipulate your data. And it might, just as well, be one of the most dangerous one. Be sure to use it carefully.</p>

<p>As you can see in our dataset, the social media following count numbers are separated by commas. That is nice to make the number clearer, but if may cause confusion when using CSV or trying to parse data in charting tools. Lets clear those commas and make it a ‚Äúclean‚Äù number.</p>

<p>Make sure you select <strong>ONLY</strong> the columns your are trying to change. They will be highlighted in blue like in the picture below. To do that, hold <code class="highlighter-rouge">SHIFT</code> and click on the column top headers (the letters).</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/google_sheets_replace1.png?raw=true" alt="Google Sheets - Replace" /></p>

<blockquote>
  <p>WARNING: If you fail or forget to do that, you may put all your dataset at risk, in some cases even other sheet tabs, as you might erase all the commas in that entire dataset, even the ones you don‚Äôt want to.</p>
</blockquote>

<p>Then proceed to <code class="highlighter-rouge">Edit -&gt; Find and Replace</code>.</p>

<p>The <code class="highlighter-rouge">Find</code> is where you will insert the character you want to change or remove, in this case the comma. The <code class="highlighter-rouge">Replace with</code> is where you put the value you want to add. Since are cleaning the number not to have any separator, we will leave it blank (no spaces). You can add a few parameters, like selecting specific ranges in your dataset to modify - but in this canse we want the entire column.</p>

<p>Click the <em>Replace all</em> button.</p>

<p>If nothing happens, it is because your spreadsheet formatting settings are adding the commas automatically, as it recognizes the values as numbers.</p>

<p>There are some ways around this issue.</p>

<ol>
  <li>Go to <code class="highlighter-rouge">Format -&gt; Number -&gt; Plain Text</code> - this will tell your cell to recognize the cell as a string, not a number. Do the <em>Find and Replace</em> process again now. This can be a faster approach.</li>
  <li><code class="highlighter-rouge">Format -&gt; Number -&gt; More Formats -&gt; Custom Number Formats</code>, and select a number format without commas or numbers. This could tell your whole spreadsheet to read numbers like that, if you want. This can be a better  practices approach.</li>
</ol>

<blockquote>
  <p>TIP: Another approach for this is to use the <code class="highlighter-rouge">SUBSTITUTE</code> function. This is safer and more accurate, but certainly more intricate.</p>
</blockquote>

<p>This this function to solve the same problem:</p>

<p><code class="highlighter-rouge">=SUBSTITUTE(H2, ",", "")</code></p>

<p>This tells that in the cell H2, we are substituting comma for nothing. If you want to just substitute the</p>

<hr />

<h2 id="be-a-pro">Be a pro</h2>

<p>Check out this <a href="https://support.google.com/docs/table/25273?hl=en">list of functions</a> and try them out.</p>

<p>The <code class="highlighter-rouge">TRIM</code> function is pretty useful when you want to extract certain parts of a text in a cell or cut white spaces.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Learn Command Line basic shortcuts</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/commandline-basics.html" />
  <id>http://miguelpaz.github.io/commandline-basics</id>
  <published>2016-06-05T00:00:00Z</published>
  <updated>2016-06-05T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>Before the <a href="https://en.wikipedia.org/wiki/Graphical_user_interface&quot; targe='_blank">graphical user interface</a> we are so accustomed to use in our computers existed, the way of interacting with a computer was to use the Command Line to <strong>command</strong> a program to do what you want it to do by writing your orders <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank">‚Äúin the form of successive lines of text‚Äù</a> or‚Ä¶ Command lines :)</p>

<p>Ok, I know what you are thinking:</p>

<blockquote>
  <p><em>Why on earth would I want to learn to use this obscure old school thing if I can just point and click stuff in my computer to open folder, files, move them around, save them, rename them or delet them?</em></p>
</blockquote>

<p>Well, it turns out that the Command Line - <em>formally known as Command Line Interface or Command Language Interpeter (CLI)</em> - is more ubiquitous and present than ever if you work with information and software <strong>(that‚Äôs you)</strong>:
- It allows you to navigate within directories, folders and files in your computer.
- It is a tool to analyze, clean and organize data.
- A great way to add more power and speed to your research or reporting skills. 
- Its very efficient when you have to process text data and work with it. Specially if your data file is very big (talking about GBs here).
- It is what you have to use to install and setup applications, run local servers, and many times the way to run code to make charts, maps and more.
- Bottomline: Is efficient, useful, is text, it works with files you always use (.csv, .txt) and it‚Äôs <strong>free</strong>.</p>

<p>It may seem confusing at first but when you get the hang of it, it‚Äôs like you have superpowers in the tip of your fingers.</p>

<h2 id="open-the-terminal">Open the Terminal</h2>

<p>The tools of command line are Terminal in Linux and Mac; and Command Prompt or PowerShell, in Windows.</p>

<p>This tutorial will include the most basic commands, and, if you want a more complete and technical tutorial, access <a href="https://www.davidbaumgold.com/tutorials/command-line/">this tutorial</a>, by David Baumgold. He called the command line ‚Äúthe ultimate seat of power on your computer‚Äù.</p>

<p>For this tutorial you will need:</p>

<ol>
  <li>Access to Terminal or Command Prompt or PowerShell</li>
</ol>

<hr />

<h2 id="application">Application</h2>

<p>The following commands are, basically, a way to get around your computer, create files, delete them and move them. You can do this things in the more friendly user interface of your operating system, but it is a good thing to know these basic commands here.</p>

<ul>
  <li>Go to a certain directory</li>
</ul>

<p>When you start the command line tool, you will generally be within the main user directory. To go to another directory (folder), you have to use the <code class="highlighter-rouge">cd</code> command:</p>

<p><code class="highlighter-rouge">cd MyFolder/MuSubfolder/MuSubfolder2</code></p>

<p>To come back to the main directory, use just <code class="highlighter-rouge">cd</code>.</p>

<p>To come back one step, for instance <code class="highlighter-rouge">MuSubfolder2</code> to <code class="highlighter-rouge">MuSubfolder</code>, type <code class="highlighter-rouge">cd ..</code>.</p>

<ul>
  <li>Check out what is inside your folder</li>
</ul>

<p>To see what is within a foder, use the <code class="highlighter-rouge">ls</code> command when you are inside the folder you want. You can also use a more structured command to see a better organized list:</p>

<p><code class="highlighter-rouge">ls -l ~/MyFolder</code> in Mac and Linux and <code class="highlighter-rouge">dir</code> in Windows.</p>

<ul>
  <li>Create a directory</li>
</ul>

<p>Once inside a directory, if you want to create another directory there, the basic command is <code class="highlighter-rouge">mkdir</code>, or make directory, followed by the name you want to give this directory.</p>

<p><code class="highlighter-rouge">mkdir MyNewDirectory</code></p>

<p>To create more than one directory at once, just use space between the names of the folders you are creating.</p>

<ul>
  <li>Create a file</li>
</ul>

<p>To create a new file within a directory, use the <code class="highlighter-rouge">touch</code> command, followed by the file name and extension.</p>

<p><code class="highlighter-rouge">touch ThisIsTextFile.txt</code> or <code class="highlighter-rouge">touch ThisIsDataFile.csv</code></p>

<p>In Windows, use the <code class="highlighter-rouge">copy con</code> command.</p>

<ul>
  <li>Copy a file</li>
</ul>

<p>To copy a file you will need to use the <code class="highlighter-rouge">cp</code> command in Mac and Linux and <code class="highlighter-rouge">copy</code> in Windows, and then the directory you want to copy it to.</p>

<p><code class="highlighter-rouge">cp ~/Desktop/ThisIsTextFile.txt ~/Documents</code> or <code class="highlighter-rouge">copy ThisIsTextFile.txt c:/Documents</code></p>

<ul>
  <li>Move a file or directory</li>
</ul>

<p>To move a file or directory, you have to use the <code class="highlighter-rouge">mv</code> command, followed by the directory you can send the object to.</p>

<p>`mv ~/Desktop/MyFile.rtf ~/Documents/MyDocFolder</p>

<ul>
  <li>Remove (Delete) files</li>
</ul>

<p>To remove or delete files, use the <code class="highlighter-rouge">rm</code> command. Be very careful to use this command, as all decisions are final - no second change in the trash bin.</p>

<p><code class="highlighter-rouge">rm MyFile.rtf</code> in Mac and Linux and <code class="highlighter-rouge">del MyFile.rtf</code> in Windows.</p>

<ul>
  <li>The permission command</li>
</ul>

<p>To install some applications on your computer, you will need to use <code class="highlighter-rouge">sudo</code> command in Mac and Linux, of the <code class="highlighter-rouge">runas</code> command in Windows.</p>

<ul>
  <li>Installing stuff</li>
</ul>

<p>In a Mac or Linux, to install or update applications, you have to use the <code class="highlighter-rouge">apt-get</code> command.</p>

<p><code class="highlighter-rouge">sudo apt-get install MySoftware</code></p>

<p>To update an existing application: <code class="highlighter-rouge">sudo apt-get upgrade</code></p>

<ul>
  <li>Clear the mess</li>
</ul>

<p>When you want to clear your command line of all the messy code, use the <code class="highlighter-rouge">clear</code> command, in Max or Linux, or <code class="highlighter-rouge">cls</code> in Windows.</p>

<hr />

<p>For the Windows reference and some other tricks, <a href="https://masteruby.github.io/productivity-booster/2014/03/26/top-ten-commands-in-terminal-you-will-use-everyday.html#.V1Osi5MrLdT">visit Master Ruby website</a>. You can also dig deeper in the <a href="https://www.codecademy.com/learn/learn-the-command-line">Code Academy course</a>, if that is your thing.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">How to make a map in Carto without geolocation data</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/cartodb-basics.html" />
  <id>http://miguelpaz.github.io/cartodb-basics</id>
  <published>2016-06-05T00:00:00Z</published>
  <updated>2016-06-05T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>Maps are a good way to visualize data about places, geographic patterns, show change over time and obviosuly when a story is completely based on geography.</p>

<p>You can use Maps to show comparisons, proportions, relationships, hierarchy, parts to a whole, distribution of elements, patterns and
<a href="http://www.ericson.net/content/2011/06/mapping-the-news/" target="_blank">more</a>. Always beware, as Matthew Ericson writes in <a href="http://www.ericson.net/content/2011/10/when-maps-shouldnt-be-maps/" target="_blank">‚ÄúWhen Maps Shouldn‚Äôt be Maps‚Äù</a>: <strong>just because something can be mapped, it does not mean it should be mapped</strong>. Avoid creating maps ‚Äúwhen the interesting patterns aren‚Äôt geographic patterns‚Äù and ‚Äúwhen the geographic data is more effective for analysis‚Äù. And always <a href="https://source.opennews.org/en-US/learning/distrust-your-data/" target="_blank">distrust your data</a> (specially when it has <a href="http://fusion.net/story/287592/internet-mapping-glitch-kansas-farm/" target="_blank">IP addresses</a> in <a href="http://fusion.net/story/290772/ip-mapping-maxmind-new-us-default-location/" target="_blank">it</a>.</p>

<p>With that said, in this short tutorial, we will create a Map with data from a .CSV file with <a href="https://www.carto.com" target="_blank">Carto</a>.</p>

<p>Carto (kwon before July 2016 as CartoDB) is one of the best tools out there to create web maps. You can make interactive maps, download static image files and customize colors and points. And it is free if you are OK with using the basic features plan (which includes enough resources by most standards).</p>

<p>However, there are a few tricks in both better representing your data and making your map look good.</p>

<p>This brief tutorial will teach how to use the most basic Carto tools to create a map that tells one simple clear story, with few data points.</p>

<p>You will need:</p>

<ol>
  <li><a href="https://raw.githubusercontent.com/miguelpaz/jlab/master/data/cartodb_example_1_countries.csv" target="_blank">This example .csv dataset</a></li>
  <li>An account in <a href="https://www.carto.com" target="_blank">Carto</a></li>
  <li>Bookmark the <a href="https://carto.com/docs/carto-editor/" target="_blank">Carto Editor</a> documentation. It includes every detail about working with the Carto maps editor.</li>
</ol>

<hr />

<h2 id="using-the-dataset">Using the dataset</h2>

<p>The example dataset bears no mystery at all. It shows countries where same-sex marriage is legally allowed, and holds only three columns of information: country, year and source. The data is from the <a href="http://www.pewresearch.org/topics/gay-marriage-and-homosexuality/" target="_blank">Pew Research Center</a>.</p>

<p>With only two of those columns it is possible to have a good, descriptive graphic representation about same sex-marriage in the world. 
Lets load the data.</p>

<p>If you already have an account in Carto, login and right away click on the green button <em>New Map</em>.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/map_cartodb_basic.png?raw=true" alt="Carto - New Map" /></p>

<p>This will take you to a screen so you can <em>Add a Dataset</em>.</p>

<p>There are dozens of ways you can upload your data into the Carto server. One of it‚Äôs great features is that it accepts several kinds of data formats (like CSV, XLS, ZIP, KML, GPX), and you can use their data library, connect your data from Dropbox, Twitter, Google Drive or upload a data file that you have in your computer.</p>

<p>In our case, we will use a .csv file from a URL. <a href="https://raw.githubusercontent.com/miguelpaz/jlab/master/data/cartodb_example_1_countries.csv">This is the dataset you will use for this tutorial</a>.</p>

<p>Copy the URL of the dataset, then click on the <em>Data File</em> tab and paste the URL, above in the white input field, then click <em>Submit</em> and then in the green button on the bottom <em>Connect Dataset</em>.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/map_cartodb_basic_data.png?raw=true" alt="Carto - data" /></p>

<p>This will lead you to a map canvas with some orange polygons in it. Polygons are the shapes and color fill of all geographic borders of countries (or regions, cities, neighborhoods, etc.). Great, you basically have a map now.</p>

<p>Carto has powerful geocoding features and it will understand things like country names (instead of lat/long, for example) and geocode them from your column containing country names.</p>

<blockquote>
  <p>WARNING: if you have repeated or misspelled country names, or somehow does not comply with the standards adopted by Carto, it may not work. Be sure to always check how your data is formatted.</p>
</blockquote>

<p>You could just put a title like ‚ÄúCountries in the World Where Same-sex Marriage is Allowed‚Äù and publish it, but you can make it even better. Lets see how to do that.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/map_cartodb_basic_no_custom.png?raw=true" alt="Carto - map with no customization" /></p>

<p>In the <em>Data View</em> tab, you can see how the data was automatically parsed by CartoDB when you uploaded from the URL.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/map_cartodb_basic_data_view.png?raw=true" alt="Carto - parsed data" /></p>

<h2 id="customizing-your-map">Customizing your map</h2>

<p>Now that you have successfully uploaded your data, lets add a title and some metadata, in the upper left corner of your screen, by clicking in <em>Edit Metadata</em>. This is not necessary, but it is a good practice.</p>

<p>Now, lets adjust the look of the map. In the right side of your screen, there will be a tab with several options - <em>Sql</em>, <em>Wizards</em>, <em>Infowindow</em>, <em>Cartocss</em>, <em>Legends</em> and <em>Filters</em>. For this tutorial, we will only focus in the <em>Wizards</em>.</p>

<p>Click on the <em>Wizards</em> tab. You will see some options that you can configure on your map.</p>

<ol>
  <li>Simple - plain color fill of a polygon or point</li>
  <li>Choropleth - used to describe intensity of the data in certain areas</li>
  <li>Category - color the polygons according to an assigned category</li>
  <li>Bubble - shows the size of the data in certain areas</li>
</ol>

<p>We are already by default using the <em>simple</em> type and, as the <em>Category</em> and the <em>Bubble</em> are meant to show sizes, intensity and dimensions of certain values (which we don‚Äôt have in this dataset), we will choose the <em>Category</em> type - just so you know how it looks like. It may want to proceed with the <em>simple</em> or the <em>category</em> option.</p>

<p>Remember: this example dataset only contains country name, year and source, not other data points.</p>

<p>You map should look like this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/map_cartodb_basic_category.png?raw=true" alt="Carto - Wizards" /></p>

<h2 id="change-the-map-background">Change the map background</h2>

<p>Carto offers a series of <em>basemaps</em>, or the background maps you will use. This option is in the lower left corner of the screen under <em>Change basemap</em>.</p>

<p>Click there and choose a basemap. Let‚Äôs pick <em>CartoDB World Eco</em> (you may choose another one if you want).</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/map_cartodb_basic_basemap.png?raw=true" alt="Carto - basemap" /></p>

<p>Now we have a category-colored, background-customized map with year labels in it. We are just missing a proper title and the source.</p>

<p>On the upper left corner, go to <code class="highlighter-rouge">Add element -&gt; Add title item</code> and put the title you think it is best. If you don‚Äôt know where to put the title box, you can go to <code class="highlighter-rouge">Options -&gt; Fixed-title</code> and it will automatically add an upper bar with the title you gave your map earlier, in the metadata section. That is what we will do for this tutorial.</p>

<p>To add a source or annotation items, go to <code class="highlighter-rouge">Add element -&gt; Add text item</code>. In this case we want to credit Pew Research Center as the source of the data, and then change the text size to 14px.</p>

<p>Now we are settled. Click export image or publish your map!</p>

<p>It should look something like this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/map_cartodb_basic_finalmap.png?raw=true" alt="Carto - Final" /></p>

<p>Here is the <a href="https://miguelpaz.carto.com/viz/089e3328-4acb-11e6-b760-0ee66e2c9693/public_map" target="_blank">published map</a>.</p>

<h2 id="be-a-pro">Be a pro</h2>

<p>Change the custom colors in the <a href="https://carto.com/docs/carto-editor/maps/#cartocss" target="_blank"><em>CartoCSS editor</em></a> tab, add interactivity functionalities, publish the map and share the link.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Building interactive charts easily with Highcharts</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/highcharts-tutorial.html" />
  <id>http://miguelpaz.github.io/highcharts-tutorial</id>
  <published>2016-06-04T00:00:00Z</published>
  <updated>2016-06-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p><a href="http://www.highcharts.com/">Highcharts</a> is a well-known charting tool designed for day to day, easy to read, fast-built charts. It is a charting library written in JavaScript that supports a series of graphics - like line, area, column, bar, pie, scatter and polar chart types. You can <a href="http://www.highcharts.com/products/highcharts">download</a> this library and work with its code, as long as it is not for commercial usage.</p>

<p>For this tutorial, we will use the <a href="https://cloud.highcharts.com/">online version</a>, which is very straight forward and easy.</p>

<p>In this tutorial, you will need to access:</p>

<ol>
  <li><a href="https://github.com/miguelpaz/jlab/blob/master/data/highcharts_example_data.tsv">The example data</a></li>
  <li>Register for a free account in the cloud version of <a href="http://cloud.highcharts.com/">Highcharts</a></li>
</ol>

<h1 id="inputing-the-data">Inputing the data</h1>

<p>In this tutorial, we will use the tab-separated values (.tsv) data format. Differently from the .csv, the .tsv has the values of its columns separated by tabs (spaces), not commas. Highcharts also accepts .csv.</p>

<p>The example data shows the social media following (Twitter and Facebook) of some New York City-based newsrooms. It was compiled by <a href="http://voltadata.info/en-lg">Volt Data Lab</a>, with reference in June 4, 2016.</p>

<blockquote>
  <p><strong>WARNING</strong>: as cool as Highcharts is, there is still a lot of confusion when using <em>commas</em> and <em>dots</em> to separate thousands. If you use commas to separate thousands, make sure your data is clean and the columns are well aligned. If you want to use dots, <strong>don‚Äôt</strong> - Highcharts does not recognize dots as thousand separators, so, for instance, 1.000.000 will be read as a string, not as a number. In our example, we will use neither, just the plain number, as our data don‚Äôt have decimals.</p>
</blockquote>

<p>Also, at least in the the online version, Highcharts <strong>only</strong> accepts string values in the first column of your dataset or the in the column headers. This happens because of the way their code is structure to render reusable charts. If you try to input string values in any column other than the first one, you will likely get this message.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/charts_highcharts_alert.png?raw=true" alt="Highcharts - error message" /></p>

<p>Moving ahead, <a href="https://github.com/miguelpaz/jlab/blob/master/data/highcharts_example_data.tsv">copy the data</a> and head to the online version of the tool. <a href="http://cloud.highcharts.com/">You can use this link to access the dataset</a>.</p>

<p>After you sign up and login, you will see a button in the upper right corner, that reads ‚Äúcreate chart‚Äù. Click on it.</p>

<p>Highchart‚Äôs interface is pretty simple and detailed, and you will see right away a field to input your data, in the left side. Paste the copied data there.</p>

<p>Immediately a line chart will pop up in the right side of the screen. But that is not the chart we want for this particular dataset, as line charts are better to show values on a time series.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/charts_highcharts1.png?raw=true" alt="Highcharts" /></p>

<p>Before we proceed, make sure to check the ‚Äúuse categories‚Äù box bellow the dataset. This will ensure that all the data, from all the newsrooms listed, will be used in the chart. It may happen that the chart already plotted all the data, but it is worth checking the box nevertheless.</p>

<hr />

<h2 id="choosing-the-best-chart">Choosing the best chart</h2>

<p>We are trying to compare the social media following of 20 of the biggest newsrooms in NYC. Proceed to the next step by clicking the green button ‚ÄúContinue to Templates‚Äù.</p>

<p>Here is where we will chose the most adequate chart type to render all that data.</p>

<p>As you will see, Highcharts will give you a list of chart types and subtypes to choose from. Feel free to browse around and see how your data look like in different types of graphics.</p>

<p>Right away, we can discard using the line and the area charts, as they are good for time series. In this case, since we are only using one dimension (number of followers) and two categories (Twitter and Facebook), we can also discard the scatter and bubble charts - which can be used when you have more data to display in the same category to show.</p>

<p>Pie charts are used to proportion of a whole. Since it is not our intention to sum up every publication‚Äôs social media following and then see how big of a piece each newsroom has, we can leave the pie chart behind. For its turn, polar charts are interesting, but with this kind of data it can be confusing.</p>

<p>This mostly leaves us with bar/column charts. Lets use the horizontal type, as it will give us a good idea of how to compare the sizes of the bars. Lets also select the stacked subtype, as it will render one bar showing two categories and we can compare both by publication clearly.</p>

<p>You chart will look like this, before customization:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/charts_highcharts2.png?raw=true" alt="Highcharts" /></p>

<hr />

<h2 id="customizing-your-chart">Customizing your chart</h2>

<p>After this step, click on the button ‚Äúcontinue to customize‚Äù. In here, we will make your chart look better.</p>

<p>First, lets give it a title (suggestion: ‚Äú<em>Top 20 newsrooms in social media following</em>‚Äù) and a subtitle (suggestion: <em>Source: Volt Data Lab</em>).  You can erase the ‚Äúvalues‚Äù label, as our data already is market with the <strong>M</strong>, from <em>million</em>, sign.</p>

<p>In the ‚Äúgeneral‚Äù tab, you can customize width, height and other things. We won‚Äôt do anything here, no need for that now, there will be an option to do that later when we export it.</p>

<p>Lets change the basic ‚Äúappearance‚Äù. Assing whatever font you want. We will leave it at 18px and will change the font type to <em>Tahoma</em>.</p>

<p>This example will also assign a light grey (hex color <code class="highlighter-rouge">#ededed</code>) to the background of the map.</p>

<h3 id="handling-the-axes">Handling the axes</h3>

<p>The axes are one of the most important components of any chart. In here, we will make sure they best represent our data.</p>

<p>Highcharts allows us to use linear (arithmetic progression) and logarithmic scales (geometric progression). This last one is useful when you data is way too far apart from each point.</p>

<p>For instance, if your data shows 20 million followers in the upper point and mere 500 followers in the lower, you won‚Äôt be able to see the smallest bar. It will be there, but will be so small that you can‚Äôt see it. The logarithmic scale adjust the scale so you can see all the bars.</p>

<p>In the ‚Äúaxes‚Äù tab, try applying the logarithmic scale to the horizontal axis (nothing will happen in the vertical axis because you are using string in that one). The path will be <code class="highlighter-rouge">Axes -&gt; Horizontal Axis -&gt; Type -&gt; Logarithmic</code>. You might notice the bottom values have bigger bars now.</p>

<h4 id="linear-scale">Linear Scale:</h4>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/charts_highcharts_linear.png?raw=true" alt="Highcharts - linear" /></p>

<h4 id="log-scale">Log Scale:</h4>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/charts_highcharts_log.png?raw=true" alt="Highcharts - log" /></p>

<p>That all being said, we <strong>won‚Äôt</strong> apply the log scale in our example, as we don‚Äôt need it: all the values are in million and give a good general look about how dominant a few companies are on social media against others.</p>

<p>One last thing here. It will look better for us to put the X axis in the top, so we can see more clearly. Follow this path <code class="highlighter-rouge">Axes -&gt; Horizontal Axis -&gt; Opposite side of chart -&gt; Check the box</code>.</p>

<h3 id="colors-and-adjustments">Colors and adjustments</h3>

<p>Proceed to the <em>data series</em> tab to customize the colors you want to use.</p>

<p>To make sure the colors are very different so we can distinguish them immediately, lets apply the a dark blue (hex color <code class="highlighter-rouge">#1c126c</code>) for Twitter and a light yellow for Facebook (hex color <code class="highlighter-rouge">#d3e466</code>).</p>

<p>For the tooltip suffix box, lets put the work ‚Äú followers‚Äù (don‚Äôt forget the space tab before), so every time you hover a bar, this suffix appears after the number.</p>

<p>In the <em>vale labels</em> tab, you can choose to plot in the graphic the numbers of followers in each bar. I don‚Äôt recommend, as you graphic will look confusing, full of numbers. Also, as it is interactive, you can hover the bars too see the same number.</p>

<p>Our last adjustment before publishing the chart is to assign the shared tooltip between the two categories, so when you hover the bars you will get both Facebook and Twitter numbers at the same time.</p>

<p>Go to <code class="highlighter-rouge">Tooltip -&gt; General -&gt; Shared between series</code>.</p>

<p>You graphic, finally, will look like this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/charts_highcharts_final1.png?raw=true" alt="Highcharts - final graphic" /></p>

<h3 id="exporting">Exporting</h3>

<p>Now, finally, go on to the last step for publishing your chart, the ‚Äúcontinue to share‚Äù button, and save your graphic. There are several options here:</p>

<ol>
  <li>Share the link to the Highcharts page of your graphic</li>
  <li>Embed the iframe in your webpage</li>
  <li>Download as image or svg</li>
  <li>Take a screenshot</li>
</ol>

<hr />

<h2 id="be-a-pro">Be a pro</h2>

<p>Come back to editing your graphic and explore other options we did not use in this tutorial, as changing label formats, the legends, font-sizes, borders, adding a prefix to the tooltip, change the order of the categories and more.</p>

<p>You may even also change the chart type and choose one that you think will be better.</p>

<p>If you want to use other data to explore this tool, <a href="http://www.gapminder.org/data/">Gapminder</a> has some cool ready-to-use datasets.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Working on your data with CSVKit</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/csvkit-tutorial.html" />
  <id>http://miguelpaz.github.io/csvkit-tutorial</id>
  <published>2016-06-01T00:00:00Z</published>
  <updated>2016-06-01T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>CSVKit is a nice tool to manipulate, organize, analyze and work with data, using the comma-separated values (csv) format. It is very light and fast. It is built in the Python programming language.</p>

<p>To access it, you will need to use the <code class="highlighter-rouge">command line</code>. Open the Terminal  in Mac OSX or Command Prompt in Windows for that.</p>

<p>This tutorial is simple and explanatory, and it is based on the great documentation in the <a href="https://csvkit.readthedocs.io/en/540/tutorial.html">CSVKit tutorial page</a>, which has a lot more things, many of which you might not use right away.</p>

<h2 id="installation">Installation</h2>

<p>There are several ways to install CSVKit in your machine.</p>

<p>You will need to have the most recent release of Python in your computer. <a href="https://www.python.org/downloads/">Download it here</a>.</p>

<p>A lot of people like to use <code class="highlighter-rouge">pip</code> to <a href="https://www.python.org/downloads/">install stuff</a> in their computers, which comes with the Python package. Journalist and coder Amanda Bee has <a href="https://github.com/amandabee/CUNY-data-storytelling/wiki/Tutorial:-Installing-CSVKit">wrote about installing CSVKit</a> in her CUNY data storytelling class, for Mac (OSX) users. The bullets are from her:</p>

<ul>
  <li>Use sudo <code class="highlighter-rouge">easy_install</code> csvkit to install CSVkit. Then <a href="http://csvkit.readthedocs.org/">read a bit</a> about what it does. If you secretly think you‚Äôll never touch the terminal again after this semester, this is your best route.</li>
  <li>Install <a href="http://brew.sh/">Homebrew</a>. Then do <code class="highlighter-rouge">pip install csvkit</code> at the command line. If you get an error that suggests you don‚Äôt have permission to install it, try <code class="highlighter-rouge">sudo pip install csvkit to install</code> with root privileges. Try <code class="highlighter-rouge">man sudo</code> if you want to understand what the command does. If you want to explore more programming, this is probably your best option.</li>
  <li>Alternatively, you can install pip with easy_install (using sudo easy_install pip) and then install CSVkit with sudo pip install csvkit. Choosing this option won‚Äôt mean you can‚Äôt install Homebrew later.</li>
</ul>

<p>For Windows users as well, <code class="highlighter-rouge">pip</code> is already installed if you‚Äôre using Python 2 &gt;=2.7.9 or Python 3 &gt;=3.4 downloaded from <a href="python.org">Python.org</a>, but you‚Äôll need to <a href="https://pip.pypa.io/en/stable/installing/#upgrading-pip">upgrade pip</a>.</p>

<p>Here is the message when your are done:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		Installing collected packages: xlrd, sqlalchemy, openpyxl, six, dbf, csvkit
	  Running setup.py install for xlrd ... done
	  Running setup.py install for sqlalchemy ... done
	  Found existing installation: openpyxl 2.2.0
	    Uninstalling openpyxl-2.2.0:
	      Successfully uninstalled openpyxl-2.2.0
	  Running setup.py install for openpyxl ... done
	  Found existing installation: six 1.5.2
	    Uninstalling six-1.5.2:
	      Successfully uninstalled six-1.5.2
	  Running setup.py install for dbf ... done
	  Running setup.py install for csvkit ... done
	Successfully installed csvkit-0.9.1 dbf-0.94.3 openpyxl-2.2.0b1 six-1.10.0 sqlalchemy-1.0.13 xlrd-0.9.4
</code></pre>
</div>

<p>‚Äî</p>

<h2 id="basics-of-csvkit">Basics of CSVKit</h2>

<p>After you are done installing it, now it is time to use it!</p>

<p>First, lets create a new directory to store the data you will be working with. I recommend calling it <code class="highlighter-rouge">csvkit_data</code>.</p>

<p>So run this in the command line:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		mkdir csvkit_data
</code></pre>
</div>

<p>Now, go to that directory:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		cd csvkit_data
</code></pre>
</div>

<p>And then, lets fetch some data to use, analyze, manipulate and play with. We prepared some data for you (csv format) about the GDP per capita all over the work, according to the IMF database. <a href="https://raw.githubusercontent.com/miguelpaz/jlab/master/data/csvkit_example_data.csv">Access the data here:</a></p>

<p>Now lets load it to that directory:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		curl -L -O https://raw.githubusercontent.com/miguelpaz/jlab/master/data/csvkit_example_data.csv
</code></pre>
</div>

<p>Finally, lets take a look at the data with the command <code class="highlighter-rouge">csvlook</code>, to see what we will analyze.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		csvlook csvkit_example_data.csv
</code></pre>
</div>

<p>The data will look messy, and it is way visually better to see it in an Excel or Google Sheets, but this is just to have a general outlook, not to really read it.</p>

<p>Another command you may use is <code class="highlighter-rouge">csvcut</code>, which lets you see and cut the columns of you data files.</p>

<p>Lets look at the column headers, to see what we will need. Run:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		csvcut -n csvkit_example_data.csv
		  1: country
		  2: 2001
		  3: 2002
		  4: 2003
		  5: 2004
		  6: 2005
		  7: 2006
		  8: 2007
		  9: 2008
		 10: 2009
		 11: 2010
		 12: 2011
		 13: 2012
		 14: 2013
		 15: 2014
</code></pre>
</div>

<p>So now you see that the GDP data is organized with one columns with the country names, and the rest with the years, while the respective rows will carry the information.</p>

<p>Lets say there is too much data, and you only want to know how was the GDP per capita in those countries during the 2008/2009 financial crisis, and a couple of years later just to see how the wealth grew.</p>

<p>For that, lets use the <code class="highlighter-rouge">csvcut</code> again.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>			csvcut -c 1,9,10,11,12 csvkit_example_data.csv
</code></pre>
</div>

<p><em>If you are using non-numbered columns, you might as well just write their names instead of the assigned numbers</em></p>

<table>
  <tbody>
    <tr>
      <td>CSVKit allows you what they call ‚Äúpipe‚Äù actions, which basically means to write in the same line, to save time, several functions, separated by a</td>
      <td>bar. Try this:</td>
    </tr>
  </tbody>
</table>

<div class="highlighter-rouge"><pre class="highlight"><code>			csvcut -c 1,9,10,11,12 csvkit_example_data.csv | csvlook | head
</code></pre>
</div>

<hr />

<h2 id="playing-with-the-numbers">Playing with the numbers</h2>

<p>CSVKit has a command called <code class="highlighter-rouge">csvstat</code>, which basically lets you to get a succinct analysis out of your data, before you can really dig into it you want.</p>

<p>It gives you the minimum of a certain column, the maximum, the average, the median and even standard deviation.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>			csvcut -c 1,9,10,11,12 csvkit_example_data.csv | csvstat
</code></pre>
</div>

<p>You will get something like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>			csvcut -c 1,9,10,11,12 csvkit_example_data.csv | csvstat
			  1. country
				&lt;type 'unicode'&gt;
				Nulls: False
				Unique values: 199
				Max length: 30

			  2. 2008
				&lt;type 'float'&gt;
				Nulls: False
				Min: 0.0
				Max: 193648.1
				Sum: 3156734.6
				Mean: 15862.9879397
				Median: 4912.3
				Standard Deviation: 25667.7567268
				Unique values: 197
				5 most frequent values:
					0.0:	3
					7112.4:	1
					3920.0:	1
					9999.1:	1
					4342.8:	1
</code></pre>
</div>

<p>You can see, for instance, that in 2009, after the financial crash, the median of the GDP per capital was lower than in 2008, but it grew back in 2010 and 2011.</p>

<p>Another great function of this is to ‚Äúquery‚Äù the data to find what you want. Lets say you only need to look for the the numbers about Brazil.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>			csvcut -c 1,9,10,11,12 csvkit_example_data.csv | csvgrep -c country -m Brazil | csvlook
</code></pre>
</div>

<p>Please be advised that the query is case sensitive, <em>BRAZIL</em> or <em>brazil</em> won‚Äôt find anything.</p>

<p>Now, in case you haven‚Äôt noticed, the csv is alphabetical order. If you want you want to sort it out differently, lets say in reverse, use the following code.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>			 csvkit_example_data.csv | csvsort -c country  -r | csvlook  
</code></pre>
</div>

<p>The <code class="highlighter-rouge">-r</code> actually means <code class="highlighter-rouge">reverse</code>. If you want to know all the sorting functionalities, <a href="https://csvkit.readthedocs.io/en/540/scripts/csvsort.html">check this page</a>.</p>

<hr />

<h2 id="converting-to-other-data-formats">Converting to other data formats</h2>

<p>You can convert data into Excel or to other formats as well with csvkit.</p>

<p>Convert Excel to CSV:
<code class="highlighter-rouge">in2csv data.xls &gt; data.csv</code></p>

<p>Convert JSON to CSV:
<code class="highlighter-rouge">in2csv data.json &gt; data.csv</code></p>

<p>Convert to JSON:
<code class="highlighter-rouge">csvjson data.csv &gt; data.json</code></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Making a bar chart with MorrisJS</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/morrisjs-tutorial.html" />
  <id>http://miguelpaz.github.io/morrisjs-tutorial</id>
  <published>2016-05-30T00:00:00Z</published>
  <updated>2016-05-30T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="line-chart-with-morrisjs">Line chart with Morris.js</h1>

<p><a href="http://morrisjs.github.io/morris.js/">Morris.js</a> is an easy to use, free javascript library to create interactive line and bar charts with very little code. As most similar tools, it is based in the D3.js library, with dependencies in Raphael.js and JQuery. It was developed by <a href="https://twitter.com/olly_smith">Olly Smith</a>.</p>

<p>The advantage of using this library is that you can customize a lot of aspects of your graphic using just one function and a few <a href="http://morrisjs.github.io/morris.js/lines.html">well-documented</a> configuration options. Binding the data is also pretty easy, using the <a href="http://www.json.org/">json</a> format.</p>

<p>In this tutorial, you will need to access:</p>

<ol>
  <li><a href="https://raw.githubusercontent.com/miguelpaz/jlab/master/data/example2_country_dates.json">The example json data</a></li>
  <li><a href="http://morrisjs.github.io/morris.js/">The Morris.js library CDN link</a> - (<em>this will give access to the code</em>)</li>
  <li><a href="http://morrisjs.github.io/morris.js/lines.html">The configuration options‚Äô page</a> (<em>where you will chose the specs for the graphic</em>)</li>
  <li>And a code editor - preferably an online one where you will see the results in real time. This example will use <a href="https://jsbin.com">JSbin</a>, but you can use <a href="http://codepen.io/">Codepen</a> or <a href="https://jsfiddle.net/">JSfiddle</a> as alternatives.</li>
</ol>

<hr />

<h2 id="starting-point">Starting point</h2>

<p>Open JSbin. Notice that there will be some HTML code there already, saving you the trouble of adding some tags.</p>

<p>Open another tab in your browser and go to the <a href="http://morrisjs.github.io/morris.js/">Morris.js</a> webpage. Scroll down a little bit to the ‚ÄúGetting started‚Äù section and copy and paste the four lines of code in the <code class="highlighter-rouge">&lt;head&gt;</code> of your HTML. You could also put it in the <code class="highlighter-rouge">&lt;body&gt;</code> tag, but it loads first if it is in the <code class="highlighter-rouge">&lt;head&gt;</code>.</p>

<p>Your code will look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	&lt;head&gt;
	  &lt;meta charset="utf-8"&gt;
	  &lt;meta name="viewport" content="width=device-width"&gt;
	  &lt;title&gt;This is a Morris.js chart!&lt;/title&gt;
	  &lt;link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css"&gt;
	  &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"&gt;&lt;/script&gt;
	  &lt;script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"&gt;&lt;/script&gt;
	  &lt;script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"&gt;&lt;/script&gt;
	&lt;/head&gt;
</code></pre>
</div>

<p>Now that we have the libraries loaded the <code class="highlighter-rouge">&lt;head&gt;</code> of our code (where nothing will be displayed in the screen), we have to proceed to the <code class="highlighter-rouge">&lt;body&gt;</code> tag.</p>

<p>Add the following code inside the <code class="highlighter-rouge">&lt;body&gt;</code> tag:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		&lt;div id="myfirstchart" style="height: 250px;"&gt;&lt;/div&gt;
</code></pre>
</div>

<p>This will be where the chart will render once we put the javascript in it. We will modify this tag a little bit later, so don‚Äôt worry right now about it.
___</p>

<h2 id="adding-the-javascript">Adding the javascript</h2>

<p>Now the real fun begins.</p>

<p>Our next step is to add some javascript code so it can retrieve the charting libraries from those tags we included to the <code class="highlighter-rouge">&lt;head&gt;</code> earlier.</p>

<p>Morris.js way of ‚Äúcalling‚Äù the line chart is fairly simple. I will use the basic example given by their website, and we will change it later.</p>

<p>Go ahead and add the following code [^Notice that this tutorial ‚Äúcleaned‚Äù the code provided in the Morris.js website, taking of the comments and putting the data in the end of the code] into the javascript:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	new Morris.Line({
	  element: 'myfirstchart',
	  xkey: 'year',
	  ykeys: ['value'],
	  labels: ['Value'],
	  data: [
	    { year: '2008', value: 20 },
	    { year: '2009', value: 10 },
	    { year: '2010', value: 5 },
	    { year: '2011', value: 5 },
	    { year: '2012', value: 20 }
	  ]
	});
</code></pre>
</div>

<p>Voil√°! You will now be able to see a small chart with a blue line and five points in it.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_morrisjs_1.png?raw=true" alt="*Your basic chart with Morris.js*" /></p>

<hr />

<h2 id="adding-your-own-data">Adding your own data</h2>

<p>In your javascript input, you might have noticed the <strong>data</strong> line. Well, that is where your chart‚Äôs lines are coming from. That field is where you <strong>bind</strong> the data! The format recognized by Morris is <em>json</em>, which is a way to structure data used by a lot of tools.</p>

<p><em>NOTE: If you have tabular data from Excel or Google Sheets, you can transform it into json using this awesome online tool <a href="http://www.csvjson.com/csv2json">CSV 2 Json</a>, from Martin Drapeau</em>.</p>

<p>Lets use as example this <a href="https://github.com/miguelpaz/jlab/blob/master/data/example5_us_time_short.json">simple dataset</a> compiled by this tutorial - in this case US GDP unemployment rate.</p>

<p>Copy and past the json after the <code class="highlighter-rouge">data:</code> in your javascript. It will result in something like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	data:
		[
  {
    "index": "Unemployment rate",
    "rate": 9,
    "year": 2011,
    "dates": "2011-1"
  },
  {
    "index": "Unemployment rate",
    "rate": 8.2,
    "year": 2012,
    "dates": "2012-1"
  },
  {
    "index": "Unemployment rate",
    "rate": 7.4,
    "year": 2013,
    "dates": "2013-1"
  },
  {
    "index": "Unemployment rate",
    "rate": 6.2,
    "year": 2014,
    "dates": "2014-1"
  }
]
</code></pre>
</div>

<p>Right after you input the data, nothing will happen just yet, but that is just because the code is not reading your data columns properly, so we will now address that issue.</p>

<p>We will now work with the axis of our chart: the X (horizontal) and the Y (vertical).</p>

<p>In your javascript panel, go to <code class="highlighter-rouge">xkey</code> option. This will define which data that will be used to define the X axis of the graphic - in this case, the <em>dates</em>[^We deliberately added the ‚Äôs‚Äô after ‚Äòdate‚Äô so you know where to look].</p>

<p><em>Note that the <strong>year</strong> is here recognized as a <strong>number</strong>, not a <strong>string</strong> - so Morris.js would see it as a date with quotation marks, like this <code class="highlighter-rouge">‚Äù2012‚Äù</code>. Check all the valid date formats for this library <a href="http://morrisjs.github.io/morris.js/lines.html">here</a>.</em></p>

<p>We will leave the <code class="highlighter-rouge">ykeys</code> with the <code class="highlighter-rouge">value</code> field. In the <code class="highlighter-rouge">label</code> field you can add anything you want, as long as it is in quotes - this will reflect in the <em>tooltip</em> of your chart - we will add <code class="highlighter-rouge">'Unemployment rate'</code>.</p>

<p>Also add this line: <code class="highlighter-rouge">xLabels: ['year'],</code>. This will avoid your chart to read the months when it renders, leaving only the years in the X axis.</p>

<p>So this part of your code will look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>new Morris.Line({
	  element: 'myfirstchart',
	  xkey: 'dates',
	  ykeys: ['rate'],
	  labels: ['Unemployment rate'],
	  xLabels: ['year'],
</code></pre>
</div>

<p>Which will render this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_morrisjs_2.png?raw=true" alt="*Morris.js graph*" /></p>

<hr />

<h2 id="customizing-your-graphic">Customizing your graphic</h2>

<p>To add some good-looking visual to your graphic, we will now use some options Morris has to offer to change fonts and colors. We will also use some CSS to give it a title, a legend, units and a source - all good practices when charting.</p>

<h3 id="text-size-colors-and-goals">Text-size, colors and goals</h3>

<p>Lets start with the text-size, the colors and some goals (references in the chart). After the code mentioned above, and before the data, lets add the following lines:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	lineColors: [''],
  postUnits: [''],
  goals: [''],
  goalStrokeWidth: [''],
  goalLineColors: [''],
  pointSize: [''],
  gridTextSize: [''],
  gridTextColor: [''],
</code></pre>
</div>

<ul>
  <li>First, the colors of the lines. Lets give it a red look, so inside the brackets add <code class="highlighter-rouge">#C00</code>;</li>
  <li>Second, the post units. Since we are talking about unemployment rate, it is a percentage, so add <code class="highlighter-rouge">%</code> inside the brackets and it will add the sign to the Y axis;</li>
  <li>Then, its time for the goals, which are nothing more than the main marks you want to add to your chart. It can be the average, the median, the regression line - it can be any number. I will make it the average of all the values we inputed, or 7.7. This is cool to serve as reference, and you can add several, separate by commas, like this <code class="highlighter-rouge">[‚ÄòGOAL 1‚Äô, ‚ÄòGOAL 2‚Äô, ‚ÄòGOAL 3‚Äô]</code>;</li>
  <li>The goal stroke width is noting more than how thick it is. I will set to 2px (default is 1px), and make it black <code class="highlighter-rouge">#000</code>;</li>
  <li>Point size is how big are the data points. If you want no points, use it 0. I will use 3px;</li>
  <li>The grid text size will define, well, the size of your text - I will use a 14px font. The text color define, well, the color - I will use some medium gray <code class="highlighter-rouge">#777</code>;</li>
</ul>

<p>In case you have noticed, Morris make it default to show the tooltip all the time, even if you don‚Äôt want. It is kind of annoying, so we will set for the tooltip to appear only when you hover.</p>

<p>Add the following line: <code class="highlighter-rouge">hideHover: ['auto‚Äô],</code>. This will do the trick.</p>

<p>So far out code looks like this (I am not adding the data for size limits):</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	new Morris.Line({
					  element: 'myfirstchart',
					  xkey: 'dates',
					  ykeys: ['rate'],
					  labels: ['Unemployment rate'],
	          xLabels: ['year'],
	          lineColors: ['#C00'],
				    postUnits: ['%'],
			      goals: ['7.7'],
			      goalStrokeWidth: ['2px'],
	          goalLineColors: ['#000'],
			      pointSize: ['3px'],
			      gridTextSize: ['14px'],
			      gridTextColor: ['#777'],
	          hideHover: ['auto'],
</code></pre>
</div>

<p>The result for now is this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_morrisjs_3.png?raw=true" alt="MorrisJS chart" /></p>

<h3 id="custom-fonts">Custom fonts</h3>

<p>Now, we are ready to add some good looking fonts here. In this example we will use <em>Roboto</em>, but you might as well use any <a href="https://www.google.com/fonts">Google Fonts</a> option.</p>

<p>In the <a href="https://www.google.com/fonts#QuickUsePlace:quickUse">Roboto page</a>, make sure you select the light (400) and bold (700) types of font (for body and header).</p>

<p>Copy and paste this link into the <code class="highlighter-rouge">&lt;head&gt;</code> of your HTML: <code class="highlighter-rouge">&lt;link href='https://fonts.googleapis.com/css?family=Roboto:400,700' rel='stylesheet' type='text/css'&gt;</code></p>

<p>Then, back to your javascript panel, proceed to add the option to enable it into the chart: <code class="highlighter-rouge">gridTextFamily: ['Roboto'],</code></p>

<p>Very nice. We are now almost done, lets just add some title, legend and source back in the HTML panel.</p>

<p>Above the <code class="highlighter-rouge">&lt;div&gt;</code> tag, add <code class="highlighter-rouge">&lt;h1&gt;</code> (title) and <code class="highlighter-rouge">&lt;p&gt;</code> (legend), as well as some <code class="highlighter-rouge">&lt;h5&gt;</code> (source) below the chart. Like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	&lt;body&gt;
	  &lt;h1&gt;US unemployment rate&lt;/h1&gt;
	  &lt;p&gt;Unemployment refers to the share of the labor force that is without work but available for and seeking employment. Measured in % of total labor force&lt;/p&gt;
	  &lt;div id="myfirstchart" style="height: 250px;"&gt;
	  &lt;/div&gt;
	  &lt;h5&gt;Source: World Bank &lt;/h5&gt;

	&lt;/body&gt;
</code></pre>
</div>

<p>To apply the font - and some other styles (like margin or padding) that you want - go to the CSS panel and add your styles. We will only add a few things:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	body {
	  padding: 0px 20px 10px 30px;
	  font-family: 'Roboto', sans-serif;
	}

	p {
		line-height: 1.4em;
		}

	h5 {
	  border-top: 1px solid #000;
	  display: inline;
	  font-weight: 400;
	}
</code></pre>
</div>

<h3 id="make-it-responsive">Make it responsive</h3>

<p>Finally, we have to make our chart responsive, so it fits several kinds of screens.</p>

<p>Fortunately, Morris allows us to do it rather easily. Just add the following line to the code: <code class="highlighter-rouge">resize: ['true'],</code></p>

<p>This will apply the 100% width to fit the screen. Let‚Äôs make it a little bit higher too: in the HTML, apply the height to 350px, like this: ` &lt;div id="myfirstchart" style="height: 350px;"&gt;`</p>

<p>Your chart will now look like this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_morrisjs_4.png?raw=true" alt="MorrisJS chart" /></p>

<hr />

<h2 id="try-adding-more-data-to-see-how-it-looks">Try adding more data to see how it looks</h2>

<p>We prepared some more data to you, so you know how it looks when you add more stuff to it.</p>

<p>It is still the same data - US unemployment rate - but this time since 2001. <a href="https://github.com/miguelpaz/jlab/blob/master/data/example5_us_time.json">You can find it here</a>.</p>

<p>Just don‚Äôt forget to recalculate the average for your <em>goal</em> as you have more data now.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_morrisjs_5.png?raw=true" alt="MorrisJS chart" /></p>

<hr />

<h4 id="check-out-the-code">Check out the code</h4>

<p><a href="https://jsbin.com/mohehow/edit?html,css,js,output">Find the code here, in this JSbin.</a></p>

<h4 id="bonus">Bonus</h4>

<p>If you feel you are ready for more, try this code with a function from JQuery to retrieve the data directly from a URL, instead of adding the JSON directly into the file:</p>

<p><a href="https://jsbin.com/cufoho/edit?html,js,output">The new code is here, in this JSbin.</a></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Making a bar chart with ChartJS</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/chartjs-tutorial.html" />
  <id>http://miguelpaz.github.io/chartjs-tutorial</id>
  <published>2016-05-29T00:00:00Z</published>
  <updated>2016-05-29T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p><a href="http://www.chartjs.org/">ChartJS</a> is an easy to use, free javascript library to create interactive line and bar charts with very little code. As most similar tools, it is based in the D3.js library. It was developed by <a href="https://github.com/chartjs/Chart.js/graphs/contributors">several people</a>.</p>

<p>Like <a href="https://github.com/miguelpaz/jlab/blob/master/morris_charts.md">MorrisJS</a>, the advantage of using this library is that you can customize a lot of aspects of your graphic using just one function and a few <a href="http://www.chartjs.org/docs/">well-documented</a> configuration options.</p>

<p>It is a little bit more complex than Morris, but it has a few competitive advantages. First, it is built by several people, so it is regularly updated. There are more chart types and is built to be responsive in mobile right from the start. Beyond all that, for the data geeks, it also offers logarithmic or even entirely custom scales with ease. Not being enough, ChartJS is very lightweight (~31kB).</p>

<p>One disadvantage is that the json data must have some specific properties that it understands, like <code class="highlighter-rouge">labels</code> and <code class="highlighter-rouge">data</code>, so you have to adapt all your dataset. Because of this, however, the tool allows advanced users to perform more customizations.</p>

<p>In this tutorial, you will need to access:</p>

<ol>
  <li><a href="https://github.com/miguelpaz/jlab/blob/master/data/chartjs_example_data_short.json">The example json data</a></li>
  <li><a href="https://cdnjs.com/libraries/Chart.js">The ChartJS library CDN link</a> - (<em>this will give access to the code</em>)</li>
  <li><a href="http://www.chartjs.org/docs/#bar-chart">The configuration options‚Äô page</a> (<em>where you will chose the specs for the graphic</em>)</li>
  <li>And a code editor - preferably an online one where you will see the results in real time. This example will use <a href="https://jsbin.com">JSbin</a>, but you can use <a href="http://codepen.io/">Codepen</a> our <a href="https://jsfiddle.net/">JSfiddle</a> as alternatives.</li>
</ol>

<hr />

<h2 id="starting-point">Starting point</h2>

<p>Open JSbin. Notice that there will be some HTML code there already, saving you the trouble of adding some tags.</p>

<p>Open another tab in your browser and go to the <a href="https://cdnjs.com/libraries/Chart.js">ChartJS CDN page</a>. Copy and paste the one line of code - <code class="highlighter-rouge">&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"&gt;&lt;/script&gt;</code> -  in the <code class="highlighter-rouge">&lt;head&gt;</code> of your [document][you can also put it in the <code class="highlighter-rouge">&lt;body&gt;</code> tag, but it loads first if it is in the <code class="highlighter-rouge">&lt;head&gt;</code>].</p>

<p>Your code will look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	<span class="cp">&lt;!DOCTYPE html&gt;</span>
	<span class="nt">&lt;html&gt;</span>
	<span class="nt">&lt;head&gt;</span>
	  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
	  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width"</span><span class="nt">&gt;</span>
	  <span class="nt">&lt;title&gt;</span>This is a bar chart with ChartJS<span class="nt">&lt;/title&gt;</span>

	  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

	<span class="nt">&lt;/head&gt;</span>
	<span class="nt">&lt;body&gt;</span>

	  <span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">"myChart"</span> <span class="na">width=</span><span class="s">"400"</span> <span class="na">height=</span><span class="s">"300"</span><span class="nt">&gt;&lt;/canvas&gt;</span>


	<span class="nt">&lt;/body&gt;</span>
	<span class="nt">&lt;/html&gt;</span>
</code></pre>
</div>

<p>Now that we have the main library loaded the <code class="highlighter-rouge">&lt;head&gt;</code> of our code (where nothing will be displayed in the screen), we have to proceed to the <code class="highlighter-rouge">&lt;body&gt;</code> tag.</p>

<p>Instead of a <code class="highlighter-rouge">&lt;div&gt;</code>, ChartJS uses the <code class="highlighter-rouge">&lt;canvas&gt;</code> tag.</p>

<p>Add the following code inside the <code class="highlighter-rouge">&lt;body&gt;</code> tag:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>  &lt;canvas id="myChart" width="400" height="400"&gt;&lt;/canvas&gt;
</code></pre>
</div>

<p>This will actually call (make appear) the chart once we put the javascript in it. We will modify this tag a little bit later, so don‚Äôt worry right now about it.
___</p>

<h2 id="adding-the-javascript">Adding the javascript</h2>

<p>Our next step is to add some javascript code so it can retrieve the charting libraries from those tags we included to the <code class="highlighter-rouge">&lt;head&gt;</code> earlier.</p>

<p>ChartJS‚Äô way of ‚Äúcalling‚Äù the line chart is fairly simple. Just:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>var ctx = document.getElementById("myChart");
</code></pre>
</div>

<p>Now, we have to add the variable that will bind the data and allow us to customize it. We will use dummy data now. Go ahead and add the following code into the javascript:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	var myChart = new Chart(ctx, {
type: 'bar',
data: {
    labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
    datasets: [{
        label: 'Those are colors',
        data: [12, 19, 3, 5, 2, 3]
    }]
},
});
</code></pre>
</div>

<p>You will now be able to see a small chart some bars.</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_chartjs_1.png?raw=true" alt="*Your basic chart with ChartJS*" /></p>

<hr />

<h2 id="adding-your-own-data">Adding your own data</h2>

<p>In your javascript input, you might have noticed the <strong>data</strong> line. That is where your chart‚Äôs lines are coming from. That field is where you <strong>bind</strong> the data! ChartJS uses json format, but it has its own specifications as how to structure data, which at first may be not so straightforward, but allows the tool to have more customization[^More advanced users can use JQuery to parse json and .csv files].</p>

<p>Lets use as example this <a href="https://github.com/miguelpaz/jlab/blob/master/data/chartjs_example_data_short.json">simple dataset</a>, which show us the 2014 per capita GDP of seven countries.</p>

<p>Copy and past the text after the <code class="highlighter-rouge">dataset:</code> in your javascript. It will result in something like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	data: {
    labels: ["Brazil", "China", "India", "Russia", "South Africa", "United Kingdom", "United States"],
    datasets: [
					  {
					    label: "GDP per capita",
					    data: [11726.8, 7590.0, 1581.5, 12735.9, 6483.9, 46297.0, 54629.5 ]
					  }
					  ]
					    },
</code></pre>
</div>

<p>The bar chart will immediately appear in your screen with ChartJS default looks. It is also interactive.</p>

<p>There are some things to understand here so you can work with other data afterwards. In this case:</p>

<ul>
  <li>The X axis is defined by the <code class="highlighter-rouge">labels</code> array;</li>
  <li>The Y axis is plotted by the <code class="highlighter-rouge">data</code> field inside the <code class="highlighter-rouge">dataset</code> array;</li>
  <li>The actual legend/unit is defined by the <code class="highlighter-rouge">label</code> inside the <code class="highlighter-rouge">dataset</code> array;</li>
</ul>

<p>The new plotted chart will look like this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_chartjs_2.png?raw=true" alt="*ChartJS graph*" /></p>

<hr />

<h2 id="customizing-your-graphic">Customizing your graphic</h2>

<p>To add some good-looking visual to your graphic, we will now use some options ChartJS has to offer to change fonts, colors and other specifications. We will also use some CSS to give it a title, a legend, units and a source - all good practices when charting.</p>

<h3 id="colors">Colors</h3>

<p>Lets start with by coloring our chart, especially the bars.</p>

<p>This more basic color configuration is applied, generally, within the <code class="highlighter-rouge">dataset</code> array. See the code below.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	datasets: [
				  {
	            label: "GDP per capita",
	            backgroundColor: "",
	            borderColor: "",
	            borderWidth: 1,
	            hoverBackgroundColor: "",
	            hoverBorderColor: "",            
	            data: [11726.8, 7590.0, 1581.5, 12735.9, 6483.9, 46297.0, 54629.5 ]
	            }
</code></pre>
</div>

<ul>
  <li>Lets apply the color red <code class="highlighter-rouge">#c00</code> here, using both the Hex color and Rgba (to get transparency). To convert Hex to Rgba, use <a href="http://hex2rgba.devoth.com/">this tool</a>.</li>
  <li>To have some clear delimitation of the bar area, lets add a solid red <code class="highlighter-rouge">#c00</code> border, of 2px;</li>
  <li>For the hover, lets add some nice dark solid blue, to emphasize the bar we are in. Add: <code class="highlighter-rouge">#59597F</code> to that field, and cut out the hover border color, since we don‚Äôt need it;</li>
</ul>

<p>So far out code looks like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	var myChart = new Chart(ctx, {
type: 'bar',
data: {
    labels: ["Brazil", "China", "India", "Russia", "South Africa", "United Kingdom", "United States"],
    datasets: [
	  {
	            label: "GDP per capita",
	    backgroundColor: "rgba(204, 0, 0, .4)",
	            borderColor: "#c00",
	            borderWidth: 2,
	            hoverBackgroundColor: "#59597F",            
	            data: [11726.8, 7590.0, 1581.5, 12735.9, 6483.9, 46297.0, 54629.5 ]
	  }
	  ]
	  }
</code></pre>
</div>

<p>The result for now is this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_chartjs_4.png?raw=true" alt="Chartjs chart" /></p>

<hr />

<h3 id="customization">Customization</h3>

<p>After you input your data and added the basic color visuals, there are plenty of more things you could do. But first, you have to add the <code class="highlighter-rouge">options</code> config. <a href="http://www.chartjs.org/docs/#getting-started-global-chart-configuration">You can check all the ChartJS options here</a>.</p>

<p>After the end of your data, when you closed it with a comma, lets add this small line of code <code class="highlighter-rouge">options: {}</code>.</p>

<p>You code will look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>  var ctx = document.getElementById("myChart").getContext("2d");


	var myChart = new Chart(ctx, {
	    type: 'bar',
	    data: {
	        labels: ["Brazil", "China", "India", "Russia", "South Africa", "United Kingdom", "United States"],
	        datasets: [
					  {
	            label: "GDP per capita",
	    backgroundColor: "rgba(204, 0, 0, .4)",
	            borderColor: "#c00",
	            borderWidth: 2,
	            hoverBackgroundColor: "#59597F",         
	            data: [11726.8, 7590.0, 1581.5, 12735.9, 6483.9, 46297.0, 54629.5 ]
					  }
								  ]
				    },
	    options: {
								}
	});
</code></pre>
</div>

<p>Now, we are ready to add some other customizations here, like fonts, grids and other cool stuff.</p>

<hr />
<p>##### Interlude to get a font
Go to <a href="https://www.google.com/fonts">Google Fonts</a> to fetch some nice typography. We will use <a href="https://www.google.com/fonts#QuickUsePlace:quickUse"><em>Roboto</em></a> - make sure you select the light (400) and bold (700) types of font (for body and header).</p>

<p>If you want Roboto, copy and paste this link into the <code class="highlighter-rouge">&lt;head&gt;</code> of your HTML: <code class="highlighter-rouge">&lt;link href='https://fonts.googleapis.com/css?family=Roboto:400,700' rel='stylesheet' type='text/css'&gt;</code></p>

<hr />

<p>Lets add some smooth animation right out of the box, so your chart get even more atention. Lets add a 3 seconds (or 3,000 milliseconds) animation: <code class="highlighter-rouge">animation: {duration: 3000},</code></p>

<p>Now, lets configure the <code class="highlighter-rouge">scale</code>, where the better part of certain charts is. First, the <code class="highlighter-rouge">yAxes: [ { } ]</code>. Inside it, simply add one <code class="highlighter-rouge">display: true</code> - nothing happens, but you will see later why we did it.</p>

<p>Now, still inside the <code class="highlighter-rouge">yAxes</code>, add the <code class="highlighter-rouge">ticks: {}</code>, followed by the following configs:</p>

<ul>
  <li><code class="highlighter-rouge">beginAtZero: true,</code> - this will tell your chart to start a zero, which is often the case, unless your baseline is different;</li>
  <li><code class="highlighter-rouge">fontFamily: 'Roboto',</code> - don‚Äôt forget the font‚Äôs link in the <code class="highlighter-rouge">&lt;head&gt;</code>;</li>
  <li><code class="highlighter-rouge">fontSize: 14,</code> - in pixels;</li>
  <li><code class="highlighter-rouge">fontColor: '#ababab',</code> - make it gray;</li>
</ul>

<p>As you can see, the Y axis numbers are not the best to show the data, without the commas. There are plenty of ways to use javascript to manipulate that number. We will make something easy, almost prosaic - trick the code to show the same number, but differently.</p>

<p>Lets add a javascript <code class="highlighter-rouge">function</code> to do that, using the <code class="highlighter-rouge">callback</code> option:</p>

<p><code class="highlighter-rouge">callback: function(value) { return value/1000 + ',000' + '$'; },</code></p>

<p>What we did here was to divide the original format by 1,000 and then add the zeroes again with a comma, plus the dollar sign. This happens because you cannot input comma in a data that is separated by another comma, as the code will read a different number - for instance: 10,000 would read 10 and 000, not 10000. Now it looks better.</p>

<p>Your <code class="highlighter-rouge">yAxes</code> code should be the following:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		yAxes: [{
			  display: true,                
			  ticks: {
				beginAtZero: true,
				fontFamily: 'Roboto',
				fontSize: 14,
				fontColor: '#ababab',
				callback: function(value) { return value/1000 + ',000' + '$'; },
				},
		    }],
</code></pre>
</div>

<p>Let‚Äôs do basically the same thing with the <code class="highlighter-rouge">xAxes</code>, but this time, lets make our chart cleaner. Assign <code class="highlighter-rouge">gridLines: {display: false},</code> to hide the vertical gridlines.</p>

<p>This is the code:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>		xAxes: [{
		    gridLines: {
		    display: false
				},
		    ticks: {
		    fontFamily: "Roboto",
		    fontSize: 14,
				},     
	      }],
</code></pre>
</div>

<p>Before we finish, lets make sure our chart is responsive, by adding <code class="highlighter-rouge">responsive: true,</code> before closing the <code class="highlighter-rouge">options</code> config.</p>

<p>Finally, lets credit the data in the HTML, after the <code class="highlighter-rouge">&lt;canvas&gt;</code> tag. Add the source: <code class="highlighter-rouge">&lt;h5&gt;Source: World Bank&lt;/h5&gt;</code>, as well as some basic CSS, to make it look better.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>	body {
	  padding: 0px 20px 10px 30px;
	  font-family: 'Roboto', sans-serif;
	}

	p {
		line-height: 1.4em;
		}

	h5 {
	  border-top: 1px solid #000;
	  display: inline;
	  font-weight: 400;
	}
</code></pre>
</div>

<h3 id="result">Result</h3>

<p>Your chart will now look like this:</p>

<p><img src="https://github.com/miguelpaz/jlab/blob/master/images/chart_chartjs_3.png?raw=true" alt="ChartJS chart" /></p>

<hr />

<h4 id="check-out-the-code">Check out the code</h4>

<p><a href="https://jsbin.com/hopeze/edit?html,css,js,output">Find the code here, in this JSbin.</a></p>

<h4 id="be-a-pro">Be a pro</h4>

<p>If you feel you are ready for more, try ‚Äúbreaking‚Äù your chart‚Äôs code so it is easier to read and manipulate. This takes more time to learn, but it is sure worth your while in the long run if you want to dig deeper.</p>

<p><a href="https://jsbin.com/donapi/edit?html,js,output">The new code is here, in this JSbin.</a></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">GitHub Pages - publishing through the online interface</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/test-special-page.html" />
  <id>http://miguelpaz.github.io/test-special-page</id>
  <published>2016-05-27T00:00:00Z</published>
  <updated>2016-05-27T00:00:00Z</updated>
  <content type="html"><![CDATA[ <style>#banner {
	background-image: url(assets/images/image2.jpeg);} </style>

<p>This is a tutorial about how to use your online interface to publish a project in <a href="https://pages.github.com/">GitHub Pages</a>, GitHub‚Äôs
website builder, directly from your code repository.</p>

<p>The process is neither obvious nor intuitive, but rather simple - and in this case we won‚Äôt resort to Git, command line or other more
advanced resources programmers generally use to be faster and collaborate on the same repo, but that could be more difficult to learn
at first.</p>

<p>GH-Pages is a good way for you to easly upload your website or project for free, without using any CMS.</p>

<p><br /></p>

<hr />
<p><br /></p>

<ul>
  <li>First, open an account in <a href="http://github.com">no GitHub</a>, if you don‚Äôt have one. It is free and fast.
    <ul>
      <li>Don‚Äôt forget to confirm this account - you will get an email asking you to do so.</li>
    </ul>
  </li>
</ul>

<p><img src="https://c1.staticflickr.com/1/719/22346475599_db39a9422d_z.jpg" alt="Follow the red arrows!" /></p>

<ul>
  <li>After this step, access your main GitHub webpage, where you will be able to create repositories, files and sites</li>
</ul>

<p><img src="https://c1.staticflickr.com/1/607/22544467521_46c261e0cd_z.jpg" alt="It will look like this" /></p>

<ul>
  <li>Now, you should create a new repository, by clicking in <code class="highlighter-rouge">New Repository</code>.</li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5636/22507327496_b147043129_o.png" alt="Not that hard!" /></p>

<ul>
  <li>Give a name to your repository. Inicially, right now it can be just /<code class="highlighter-rouge">test</code>
    <ul>
      <li>Give it a brief description to your project. Something like: <code class="highlighter-rouge">this is a test, please don't mind this trial!</code>.</li>
      <li>A description is optional but it is useful and adds a good practice touch even to a test</li>
    </ul>
  </li>
  <li>Make sure to select the field <code class="highlighter-rouge">Initialize this repository with a README</code>.
    <ul>
      <li><strong>This is particularly important</strong>, because if you don‚Äôt, GitHub will assume you are initializing and
organizing your repo through a different process, and you will not be able to populate your project just yet.
It is easier to just check it.</li>
    </ul>
  </li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5655/22345977598_c7a2a5f6c3_z.jpg" alt="Life-saving arrows" /></p>

<ul>
  <li>The repo page must appear exactly as shown in the image below
    <ul>
      <li>Of course, note for any difference in title, content etc, but otherwhise should be the same</li>
    </ul>
  </li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5739/22345360900_9b698a4ffa_z.jpg" alt="" /></p>

<ul>
  <li>Now that you are in the repo page, this is where you will add your codes.
    <ul>
      <li>If you have HTML and CSS ready, great!. If not, feel free to use <a href="https://github.com/voltdatalab/template-courses">this one as an example</a></li>
    </ul>
  </li>
  <li>What you will do next is upload the codes, using either <code class="highlighter-rouge">CTRL+C + CTRL+V</code> or the <code class="highlighter-rouge">upload files</code> button</li>
  <li>Add a description to your project if you haven‚Äôt done so, but ignore - for the time being - the field website.</li>
</ul>

<p><img src="https://c1.staticflickr.com/1/690/22519805902_c437a365f6_z.jpg" alt="Ignore the website field" /></p>

<ul>
  <li>If you want to copy and paste your code, click in <code class="highlighter-rouge">create a new file</code> button</li>
  <li>If you want to upload files, like <code class="highlighter-rouge">.html</code> and <code class="highlighter-rouge">.css</code>, click <code class="highlighter-rouge">upload files</code></li>
</ul>

<p><img src="https://c1.staticflickr.com/1/590/22533313525_b7fc3c1a3d_o.png" alt="" /></p>

<ul>
  <li>In this example, I will proceed with the more arcaic approach: copying and pasting
    <ul>
      <li>Keep in mind that this is just a very simple, easy to implement approach, and its worth doing it to see how GitHub works</li>
      <li>We will talk about the <a href="https://desktop.github.com/">desktop client</a> later</li>
    </ul>
  </li>
  <li>If you copy and paste, add a name to your initial HMTL file. In this case, as this will be your initial page
(the only one for the time being in the repo), the name <strong>must be</strong> <code class="highlighter-rouge">index.html</code></li>
  <li>Paste the HTML in the field below <code class="highlighter-rouge">Edit New File</code></li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5768/22507327876_fc823a3103_o.png" alt="Main file is &lt;em&gt;index.html&lt;/em&gt;" /></p>

<ul>
  <li>Scroll down and give a description to your additions/changes if you want, and click the <code class="highlighter-rouge">Commit</code> button.</li>
  <li>In this case, <code class="highlighter-rouge">Commit</code> would work like, roughly speaking, the <code class="highlighter-rouge">Publishing</code> button in a CMS</li>
  <li>Don‚Äôt worry just yet with the option <code class="highlighter-rouge">Create a new branch</code>, it is used when you are making a separate branch in your repo,
which its not our case right now</li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5677/22507327956_9550904276_b.jpg" alt="" /></p>

<ul>
  <li>Now we have a published file in our repo. Note that no webpage is yet <em>live</em> - what we just did was uploading a file that
will be published</li>
  <li>We put our HTML out there, the basic structure. Now, we need to add the styles, the CSS
    <ul>
      <li>Do the same process you did before, if you haven‚Äôt uploaded both at the same time</li>
    </ul>
  </li>
  <li>IMPORTANT NOTE: remember to add, in the <code class="highlighter-rouge">&lt;head&gt;</code> tags of your HTML file, the link for the CSS, like this generic example:
<code class="highlighter-rouge">&lt;link rel="stylesheet" href="home.css" type="text/css" charset="utf-8"&gt;</code>
    <ul>
      <li>If you don‚Äôt remember how to do it, use the code above and just change the <code class="highlighter-rouge">href=‚Äú#"</code> value to link to your CSS.</li>
      <li>If you CSS is in the same folder as the HTML, just add <code class="highlighter-rouge">NAME OF CSS.css</code> to the <code class="highlighter-rouge">href</code>. If it is in a folder, add <code class="highlighter-rouge">FOLDER NAME/NAME OF CSS.css</code></li>
    </ul>
  </li>
  <li>If you are done with all the steps, we are almost there</li>
  <li>Go to the main page of your repository, where are your HTML and CSS files</li>
  <li>Just above the files, on the left side, there is a small box that says <code class="highlighter-rouge">Branch: master</code></li>
  <li>We will click on it and, in the text field, we will write <code class="highlighter-rouge">gh-pages</code></li>
  <li>Then <code class="highlighter-rouge">Create Branch: gh-pages</code>
    <ul>
      <li>This is how GitHub will understand that you will want a proper published page, not just the files in a repo</li>
      <li>Again, the main page will be <code class="highlighter-rouge">index.html</code>.</li>
    </ul>
  </li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5720/22519803312_2c0f356197_o.png" alt="Important" /></p>

<ul>
  <li>We are almost done</li>
  <li>You page is practically published</li>
  <li>In that field we ignored at first - <code class="highlighter-rouge">Edit -&gt; Website</code> - we will add another thing, not so obvious but pretty simple</li>
  <li>As GitHub uses its domain github.com for repositories, it redirects all GH-Pages sites to another domain, ending in <code class="highlighter-rouge">github.io</code></li>
  <li>In the field <code class="highlighter-rouge">Website</code>, add this: <code class="highlighter-rouge">http://NAME OF YOUR REPOSITORY.github.io/**NAME OF THE PROJECT</code></li>
  <li>Don‚Äôt forget the <code class="highlighter-rouge">http://</code> prefix</li>
</ul>

<p><img src="https://c1.staticflickr.com/1/658/22519803402_5213812875_b.jpg" alt="Yeah!" /></p>

<ul>
  <li>Your project will be live in the URL you just added - click on it to see
    <ul>
      <li>Sometimes GitHub will take up to 30 seconds to recognize changes, so be patient</li>
    </ul>
  </li>
  <li>One last thing: now that you have to branches in the same repo, <code class="highlighter-rouge">master</code> and <code class="highlighter-rouge">gh-pages</code>, you need to prioritize <code class="highlighter-rouge">gh-pages</code>
    <ul>
      <li>If you do changes in <code class="highlighter-rouge">master</code>, you webpage won‚Äôt recognize it, because it is in a different branch</li>
    </ul>
  </li>
  <li>To make <code class="highlighter-rouge">gh-pages</code> you standard for this repo, go to `Settings_ &gt; <em>Branches</em> &gt; <em>Select gh-pages in the box</em> &gt; <em>Update</em></li>
  <li>If you want, you can now erase the <code class="highlighter-rouge">master</code> branch in the <code class="highlighter-rouge">branches</code> tab back in your repo.
    <ul>
      <li>This won‚Äôt affect your page</li>
    </ul>
  </li>
</ul>

<p><img src="https://c1.staticflickr.com/1/733/21910569724_eb3275bddf_b.jpg" alt="" /></p>

 ]]></content>
</entry>


  <entry>
  <title type="text">GitHub Pages - publishing through the online interface</title>
  <link rel="alternate" type="text/html" href="http://miguelpaz.github.io/gh-pages-tutorial.html" />
  <id>http://miguelpaz.github.io/gh-pages-tutorial</id>
  <published>2016-05-27T00:00:00Z</published>
  <updated>2016-05-27T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>This is a tutorial about how to use your online interface to publish a project in <a href="https://pages.github.com/">GitHub Pages</a>, GitHub‚Äôs
website builder, directly from your code repository.</p>

<p>The process is neither obvious nor intuitive, but rather simple - and in this case we won‚Äôt resort to Git, command line or other more
advanced resources programmers generally use to be faster and collaborate on the same repo, but that could be more difficult to learn
at first.</p>

<p>GH-Pages is a good way for you to easly upload your website or project for free, without using any CMS.</p>

<p><br /></p>

<hr />
<p><br /></p>

<ul>
  <li>First, open an account in <a href="http://github.com">no GitHub</a>, if you don‚Äôt have one. It is free and fast.
    <ul>
      <li>Don‚Äôt forget to confirm this account - you will get an email asking you to do so.</li>
    </ul>
  </li>
</ul>

<p><img src="https://c1.staticflickr.com/1/719/22346475599_db39a9422d_z.jpg" alt="Follow the red arrows!" /></p>

<ul>
  <li>After this step, access your main GitHub webpage, where you will be able to create repositories, files and sites</li>
</ul>

<p><img src="https://c1.staticflickr.com/1/607/22544467521_46c261e0cd_z.jpg" alt="It will look like this" /></p>

<ul>
  <li>Now, you should create a new repository, by clicking in <code class="highlighter-rouge">New Repository</code>.</li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5636/22507327496_b147043129_o.png" alt="Not that hard!" /></p>

<ul>
  <li>Give a name to your repository. Inicially, right now it can be just /<code class="highlighter-rouge">test</code>
    <ul>
      <li>Give it a brief description to your project. Something like: <code class="highlighter-rouge">this is a test, please don't mind this trial!</code>.</li>
      <li>A description is optional but it is useful and adds a good practice touch even to a test</li>
    </ul>
  </li>
  <li>Make sure to select the field <code class="highlighter-rouge">Initialize this repository with a README</code>.
    <ul>
      <li><strong>This is particularly important</strong>, because if you don‚Äôt, GitHub will assume you are initializing and
organizing your repo through a different process, and you will not be able to populate your project just yet.
It is easier to just check it.</li>
    </ul>
  </li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5655/22345977598_c7a2a5f6c3_z.jpg" alt="Life-saving arrows" /></p>

<ul>
  <li>The repo page must appear exactly as shown in the image below
    <ul>
      <li>Of course, note for any difference in title, content etc, but otherwhise should be the same</li>
    </ul>
  </li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5739/22345360900_9b698a4ffa_z.jpg" alt="" /></p>

<ul>
  <li>Now that you are in the repo page, this is where you will add your codes.
    <ul>
      <li>If you have HTML and CSS ready, great!. If not, feel free to use <a href="https://github.com/voltdatalab/template-courses">this one as an example</a></li>
    </ul>
  </li>
  <li>What you will do next is upload the codes, using either <code class="highlighter-rouge">CTRL+C + CTRL+V</code> or the <code class="highlighter-rouge">upload files</code> button</li>
  <li>Add a description to your project if you haven‚Äôt done so, but ignore - for the time being - the field website.</li>
</ul>

<p><img src="https://c1.staticflickr.com/1/690/22519805902_c437a365f6_z.jpg" alt="Ignore the website field" /></p>

<ul>
  <li>If you want to copy and paste your code, click in <code class="highlighter-rouge">create a new file</code> button</li>
  <li>If you want to upload files, like <code class="highlighter-rouge">.html</code> and <code class="highlighter-rouge">.css</code>, click <code class="highlighter-rouge">upload files</code></li>
</ul>

<p><img src="https://c1.staticflickr.com/1/590/22533313525_b7fc3c1a3d_o.png" alt="" /></p>

<ul>
  <li>In this example, I will proceed with the more arcaic approach: copying and pasting
    <ul>
      <li>Keep in mind that this is just a very simple, easy to implement approach, and its worth doing it to see how GitHub works</li>
      <li>We will talk about the <a href="https://desktop.github.com/">desktop client</a> later</li>
    </ul>
  </li>
  <li>If you copy and paste, add a name to your initial HMTL file. In this case, as this will be your initial page
(the only one for the time being in the repo), the name <strong>must be</strong> <code class="highlighter-rouge">index.html</code></li>
  <li>Paste the HTML in the field below <code class="highlighter-rouge">Edit New File</code></li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5768/22507327876_fc823a3103_o.png" alt="Main file is &lt;em&gt;index.html&lt;/em&gt;" /></p>

<ul>
  <li>Scroll down and give a description to your additions/changes if you want, and click the <code class="highlighter-rouge">Commit</code> button.</li>
  <li>In this case, <code class="highlighter-rouge">Commit</code> would work like, roughly speaking, the <code class="highlighter-rouge">Publishing</code> button in a CMS</li>
  <li>Don‚Äôt worry just yet with the option <code class="highlighter-rouge">Create a new branch</code>, it is used when you are making a separate branch in your repo,
which its not our case right now</li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5677/22507327956_9550904276_b.jpg" alt="" /></p>

<ul>
  <li>Now we have a published file in our repo. Note that no webpage is yet <em>live</em> - what we just did was uploading a file that
will be published</li>
  <li>We put our HTML out there, the basic structure. Now, we need to add the styles, the CSS
    <ul>
      <li>Do the same process you did before, if you haven‚Äôt uploaded both at the same time</li>
    </ul>
  </li>
  <li>IMPORTANT NOTE: remember to add, in the <code class="highlighter-rouge">&lt;head&gt;</code> tags of your HTML file, the link for the CSS, like this generic example:
<code class="highlighter-rouge">&lt;link rel="stylesheet" href="home.css" type="text/css" charset="utf-8"&gt;</code>
    <ul>
      <li>If you don‚Äôt remember how to do it, use the code above and just change the <code class="highlighter-rouge">href=‚Äú#"</code> value to link to your CSS.</li>
      <li>If you CSS is in the same folder as the HTML, just add <code class="highlighter-rouge">NAME OF CSS.css</code> to the <code class="highlighter-rouge">href</code>. If it is in a folder, add <code class="highlighter-rouge">FOLDER NAME/NAME OF CSS.css</code></li>
    </ul>
  </li>
  <li>If you are done with all the steps, we are almost there</li>
  <li>Go to the main page of your repository, where are your HTML and CSS files</li>
  <li>Just above the files, on the left side, there is a small box that says <code class="highlighter-rouge">Branch: master</code></li>
  <li>We will click on it and, in the text field, we will write <code class="highlighter-rouge">gh-pages</code></li>
  <li>Then <code class="highlighter-rouge">Create Branch: gh-pages</code>
    <ul>
      <li>This is how GitHub will understand that you will want a proper published page, not just the files in a repo</li>
      <li>Again, the main page will be <code class="highlighter-rouge">index.html</code>.</li>
    </ul>
  </li>
</ul>

<p><img src="https://c2.staticflickr.com/6/5720/22519803312_2c0f356197_o.png" alt="Important" /></p>

<ul>
  <li>We are almost done</li>
  <li>You page is practically published</li>
  <li>In that field we ignored at first - <code class="highlighter-rouge">Edit -&gt; Website</code> - we will add another thing, not so obvious but pretty simple</li>
  <li>As GitHub uses its domain github.com for repositories, it redirects all GH-Pages sites to another domain, ending in <code class="highlighter-rouge">github.io</code></li>
  <li>In the field <code class="highlighter-rouge">Website</code>, add this: <code class="highlighter-rouge">http://NAME OF YOUR REPOSITORY.github.io/**NAME OF THE PROJECT</code></li>
  <li>Don‚Äôt forget the <code class="highlighter-rouge">http://</code> prefix</li>
</ul>

<p><img src="https://c1.staticflickr.com/1/658/22519803402_5213812875_b.jpg" alt="Yeah!" /></p>

<ul>
  <li>Your project will be live in the URL you just added - click on it to see
    <ul>
      <li>Sometimes GitHub will take up to 30 seconds to recognize changes, so be patient</li>
    </ul>
  </li>
  <li>One last thing: now that you have to branches in the same repo, <code class="highlighter-rouge">master</code> and <code class="highlighter-rouge">gh-pages</code>, you need to prioritize <code class="highlighter-rouge">gh-pages</code>
    <ul>
      <li>If you do changes in <code class="highlighter-rouge">master</code>, you webpage won‚Äôt recognize it, because it is in a different branch</li>
    </ul>
  </li>
  <li>To make <code class="highlighter-rouge">gh-pages</code> you standard for this repo, go to `Settings_ &gt; <em>Branches</em> &gt; <em>Select gh-pages in the box</em> &gt; <em>Update</em></li>
  <li>If you want, you can now erase the <code class="highlighter-rouge">master</code> branch in the <code class="highlighter-rouge">branches</code> tab back in your repo.
    <ul>
      <li>This won‚Äôt affect your page</li>
    </ul>
  </li>
</ul>

<p><img src="https://c1.staticflickr.com/1/733/21910569724_eb3275bddf_b.jpg" alt="" /></p>

 ]]></content>
</entry>



</feed>
